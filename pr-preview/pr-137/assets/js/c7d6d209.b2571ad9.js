"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[696],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||a;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:5,sidebar_label:"Wordle tutorial",description:"Get started with Ignite CLI, Celestia and Rollkit"},i="Wordle app",s={unversionedId:"tutorials/wordle",id:"tutorials/wordle",title:"Wordle app",description:"Get started with Ignite CLI, Celestia and Rollkit",source:"@site/docs/tutorials/wordle.md",sourceDirName:"tutorials",slug:"/tutorials/wordle",permalink:"/pr-preview/pr-137/docs/tutorials/wordle",draft:!1,editUrl:"https://github.com/rollkit/docs/tree/main/docs/tutorials/wordle.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Wordle tutorial",description:"Get started with Ignite CLI, Celestia and Rollkit"},sidebar:"docs",previous:{title:"Intermediate",permalink:"/pr-preview/pr-137/docs/category/intermediate"},next:{title:"CosmWasm tutorial",permalink:"/pr-preview/pr-137/docs/tutorials/cosmwasm"}},l={},d=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Design implementation",id:"design-implementation",level:2},{value:"Table of contents for this tutorial",id:"table-of-contents-for-this-tutorial",level:2},{value:"Ignite and scaffolding the wordle chain",id:"ignite-and-scaffolding-the-wordle-chain",level:2},{value:"Ignite",id:"ignite",level:3},{value:"Scaffolding the wordle chain",id:"scaffolding-the-wordle-chain",level:3},{value:"Wordle directory",id:"wordle-directory",level:3},{value:"Setting up Rollkit",id:"setting-up-rollkit",level:2},{value:"Installing Rollkit",id:"installing-rollkit",level:3},{value:"Creating the wordle module",id:"creating-the-wordle-module",level:2},{value:"Scaffolding a module",id:"scaffolding-a-module",level:3},{value:"Messages",id:"messages",level:2},{value:"Scaffolding a message",id:"scaffolding-a-message",level:3},{value:"Wordle types",id:"wordle-types",level:2},{value:"Scaffolding wordle types",id:"scaffolding-wordle-types",level:3},{value:"Keeper functions",id:"keeper-functions",level:2},{value:"SubmitWordle function",id:"submitwordle-function",level:3},{value:"<code>SubmitGuess</code> function",id:"submitguess-function",level:3},{value:"Protobuf file",id:"protobuf-file",level:3},{value:"Run the wordle chain",id:"run-the-wordle-chain",level:2},{value:"Run a Celestia light node",id:"run-a-celestia-light-node",level:3},{value:"Building and running wordle chain",id:"building-and-running-wordle-chain",level:3},{value:"Extending in the future",id:"extending-in-the-future",level:3}],u={toc:d};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wordle-app"},"Wordle app"),(0,r.kt)("admonition",{title:"difficulty",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Intermediate")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"wordle-app",src:n(3500).Z,width:"2364",height:"1624"})),(0,r.kt)("p",null,"This tutorial guide will go over building a cosmos-sdk app\nfor Rollkit, the Sovereign-Rollup implementation of\nTendermint, for the popular game ",(0,r.kt)("a",{parentName:"p",href:"https://www.nytimes.com/games/wordle/index.html"},"Wordle"),"."),(0,r.kt)("p",null,"This tutorial will go over how to setup Rollkit\nin the Ignite CLI and use it to build the game.\nThe tutorial will go over the simple design,\nas well as conclude with future implementations and ideas\nto extend this codebase."),(0,r.kt)("admonition",{title:"note",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This tutorial will explore developing with Rollkit,\nwhich is still in Alpha stage. If you run into bugs, please write a Github\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rollkit/docs/issues/new"},"Issue ticket"),"\nor let us know in our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.com/channels/638338779505229824/1065974175237414972"},"Discord"),".")),(0,r.kt)("admonition",{title:"caution",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"The script for this tutorial is built for Celestia's\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/mocha"},"Mocha testnet"),".\nIf you choose to use Arabica Devnet,\nyou will need to modify the script manually.")),(0,r.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,r.kt)("p",null,"Given this tutorial is targeted for developers who are experienced\nin Cosmos-SDK, we recommend you go over the following tutorials\nin Ignite to understand all the different components in Cosmos-SDK before\nproceeding with this tutorial."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/pr-preview/pr-137/docs/tutorials/gm-world"},"GM World")," or ",(0,r.kt)("a",{parentName:"li",href:"https://docs.ignite.com/guide/hello"},"Hello, World")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/pr-preview/pr-137/docs/tutorials/recipe-book"},"Recipe Book")," or ",(0,r.kt)("a",{parentName:"li",href:"https://docs.ignite.com/guide/blog"},"Blog and Module Basics")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.ignite.com/guide/nameservice"},"Nameservice Tutorial")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.ignite.com/guide/scavenge"},"Scavenger Hunt"))),(0,r.kt)("p",null,"You do not have to do those guides in order to follow this Wordle tutorial,\nbut doing so helps you understand the architecture of Cosmos-SDK better."),(0,r.kt)("h2",{id:"design-implementation"},"Design implementation"),(0,r.kt)("p",null,"The rules of Wordle are simple: You have to guess the word of the day."),(0,r.kt)("p",null,"Key Points to Consider:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The word is a five-letter word."),(0,r.kt)("li",{parentName:"ul"},"You have 6 guesses."),(0,r.kt)("li",{parentName:"ul"},"Every 24 hours, there\u2019s a new word.")),(0,r.kt)("p",null,"The GUI for Wordle shows you a few indicators: a\ngreen highlight on a letter in a certain position\nmeans that\u2019s the correct letter for the Wordle\nin the right position. A yellow highlight means\nit\u2019s a correct letter for the Wordle included in\nthe wrong position. A grey highlight means the letter\nisn\u2019t part of the Wordle."),(0,r.kt)("p",null,"For simplicity of the design, we will avoid those\nhints, although there are ways to extend this codebase\nto implement that, which we will show at the end."),(0,r.kt)("p",null,"In this current design, we implement the following rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 Wordle can be submitted per day"),(0,r.kt)("li",{parentName:"ul"},"Every address will have 6 tries to guess the word"),(0,r.kt)("li",{parentName:"ul"},"It must be a five-letter word.  "),(0,r.kt)("li",{parentName:"ul"},"Whoever guesses the word correctly before their\n6 tries are over gets an award of 100 WORDLE tokens.")),(0,r.kt)("p",null,"We will go over the architecture to achieve this further\nin the guide. But for now, we will get started setting up\nour development environment."),(0,r.kt)("h2",{id:"table-of-contents-for-this-tutorial"},"Table of contents for this tutorial"),(0,r.kt)("p",null,"The following tutorial is broken down into the following\nsections:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#ignite-and-scaffolding-the-wordle-chain"},"Ignite and Chain Scaffolding")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#setting-up-rollkit"},"Installing Rollkit")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#creating-the-wordle-module"},"Modules")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#messages"},"Messages")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#wordle-types"},"Types")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#keeper-functions"},"Keepers")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#run-the-wordle-chain"},"Running Wordle"))),(0,r.kt)("h2",{id:"ignite-and-scaffolding-the-wordle-chain"},"Ignite and scaffolding the wordle chain"),(0,r.kt)("h3",{id:"ignite"},"Ignite"),(0,r.kt)("p",null,"Ignite is an amazing CLI tool to help us get started building\nour own blockchains for cosmos-sdk apps. It provides lots of\npower toolings and scaffoldings for adding messages, types,\nand modules with a host of cosmos-sdk libraries provided."),(0,r.kt)("p",null,"You can read more about Ignite ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ignite.com"},"here"),"."),(0,r.kt)("p",null,"To install Ignite, you can run this command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://get.ignite.com/cli | bash\nsudo mv ignite /usr/local/bin/\n")),(0,r.kt)("p",null,"This installs Ignite CLI in your local machine.\nThis tutorial uses a MacOS but it should work for Windows.\nFor Windows users, check out the Ignite docs on installation\nfor Windows machines."),(0,r.kt)("p",null,"Now, refresh your terminal using ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," or open a new terminal\nsession for the change to take place."),(0,r.kt)("p",null,"If you run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ignite --help\n")),(0,r.kt)("p",null,"You should see an output of help commands meaning Ignite\nwas installed successfully!"),(0,r.kt)("h3",{id:"scaffolding-the-wordle-chain"},"Scaffolding the wordle chain"),(0,r.kt)("p",null,"Now, comes the fun part, creating a new blockchain! With Ignite,\nthe process is pretty easy and straightforward."),(0,r.kt)("p",null,"Ignite CLI comes with several scaffolding commands that are\ndesigned to make development more straightforward by creating\neverything you need to build your blockchain."),(0,r.kt)("p",null,"First, we will use Ignite CLI to build the foundation of a fresh\nCosmos SDK blockchain. Ignite minimizes how much blockchain code\nyou must write yourself. If you are coming from the EVM-world, think of\nIgnite as a Cosmos-SDK version of Foundry or Hardhat but specifically\ndesigned to build blockchains."),(0,r.kt)("p",null,"We first run the following command to setup our project for\nour new blockchain, Wordle."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold chain wordle --no-module\n")),(0,r.kt)("p",null,"This command scaffolds a new chain directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"wordle"),"\nin your local directory from which you ran the command. Notice\nthat we passed the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-module")," flag, this is because we will be\ncreating the module after."),(0,r.kt)("h3",{id:"wordle-directory"},"Wordle directory"),(0,r.kt)("p",null,"Now, it\u2019s time to enter the directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd wordle\n")),(0,r.kt)("p",null,"Inside you will see several directories and architecture for\nyour cosmos-sdk blockchain."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"File/directory"),(0,r.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"app/"),(0,r.kt)("td",{parentName:"tr",align:null},"Files that wire together the blockchain. The most important file is ",(0,r.kt)("inlineCode",{parentName:"td"},"app.go")," that contains type definition of the blockchain and functions to create and initialize it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cmd/"),(0,r.kt)("td",{parentName:"tr",align:null},"The main package responsible for the CLI of compiled binary.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"docs/"),(0,r.kt)("td",{parentName:"tr",align:null},"Directory for project documentation. By default, an OpenAPI spec is generated.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"proto/"),(0,r.kt)("td",{parentName:"tr",align:null},"Protocol buffer files describing the data structure.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"testutil/"),(0,r.kt)("td",{parentName:"tr",align:null},"Helper functions for testing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"vue/"),(0,r.kt)("td",{parentName:"tr",align:null},"A Vue 3 web app template.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x/"),(0,r.kt)("td",{parentName:"tr",align:null},"Cosmos SDK modules and custom modules.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"config.yml"),(0,r.kt)("td",{parentName:"tr",align:null},"A configuration file for customizing a chain in development.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"readme.md"),(0,r.kt)("td",{parentName:"tr",align:null},"A readme file for your sovereign application-specific blockchain project.")))),(0,r.kt)("p",null,"Going over each one is outside the scope of this guide, but we encourage you\nto read about it ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ignite.com/kb"},"here"),"."),(0,r.kt)("p",null,"Most of the tutorial work will happen inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," directory."),(0,r.kt)("h2",{id:"setting-up-rollkit"},"Setting up Rollkit"),(0,r.kt)("p",null,"Before we continue with building our Wordle App, we need to set up\nRollkit on our codebase."),(0,r.kt)("h3",{id:"installing-rollkit"},"Installing Rollkit"),(0,r.kt)("p",null,"Run the following command inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"wordle")," directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go mod edit -replace github.com/cosmos/cosmos-sdk=github.com/rollkit/cosmos-sdk@v0.46.7-rollkit-v0.6.0-no-fraud-proofs\ngo mod edit -replace github.com/tendermint/tendermint=github.com/celestiaorg/tendermint@v0.34.22-0.20221202214355-3605c597500d\ngo mod tidy\ngo mod download\n")),(0,r.kt)("p",null,"With that, we have Rollkit changes added to the project directory. Now,\nlet's build the Wordle app!"),(0,r.kt)("h2",{id:"creating-the-wordle-module"},"Creating the wordle module"),(0,r.kt)("p",null,"For the Wordle module, we can add dependencies offered by Cosmos-SDK."),(0,r.kt)("p",null,"From the Cosmos-SDK docs, a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ignite.com/guide/nameservice#cosmos-sdk-modules"},"module"),"\nis defined as the following:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"In a Cosmos SDK blockchain, application-specific logic\nis implemented in separate modules. Modules keep code easy\nto understand and reuse. Each module contains its own message\nand transaction processor, while the Cosmos SDK is responsible\nfor routing each message to its respective module.")),(0,r.kt)("p",null,"Many modules exist for slashing, validating, auth."),(0,r.kt)("h3",{id:"scaffolding-a-module"},"Scaffolding a module"),(0,r.kt)("p",null,"We will be using the ",(0,r.kt)("inlineCode",{parentName:"p"},"bank")," module dependency for transactions."),(0,r.kt)("p",null,"From the Cosmos-SDK docs, the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/modules/bank"},(0,r.kt)("inlineCode",{parentName:"a"},"bank")),"\nmodule is defined as the following:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The bank module is responsible for handling multi-asset coin\ntransfers between accounts and tracking special-case pseudo-transfers\nwhich must work differently with particular kinds of accounts\n(notably delegating/undelegating for vesting accounts). It exposes\nseveral interfaces with varying capabilities for secure interaction\nwith other modules which must alter user balances.")),(0,r.kt)("p",null,"We build the module with the ",(0,r.kt)("inlineCode",{parentName:"p"},"bank")," dependency with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold module wordle --dep bank\n")),(0,r.kt)("p",null,"This will scaffold the Wordle module to our Wordle Chain project."),(0,r.kt)("h2",{id:"messages"},"Messages"),(0,r.kt)("p",null,"Messages allow us to process and submit information to our specific module."),(0,r.kt)("p",null,"From the Cosmos-SDK docs, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/building-modules/messages-and-queries.html#messages"},"messages"),"\nare:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"In the Cosmos SDK, messages are objects that are contained\nin transactions to trigger state transitions. Each Cosmos SDK\nmodule defines a list of messages and how to handle them.")),(0,r.kt)("p",null,"For messages for Wordle, given our initial design, we will\nmake 2 messages with ignite."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first one is: ",(0,r.kt)("inlineCode",{parentName:"li"},"SubmitWordle")," and it only passes the Wordle of the Day."),(0,r.kt)("li",{parentName:"ul"},"The second one is: ",(0,r.kt)("inlineCode",{parentName:"li"},"SubmitGuess")," and it attempts to guess the submitted\nwordle. It also passes a word as a guess.")),(0,r.kt)("p",null,"With these initial designs, we can start creating our messages!"),(0,r.kt)("h3",{id:"scaffolding-a-message"},"Scaffolding a message"),(0,r.kt)("p",null,"To create the ",(0,r.kt)("inlineCode",{parentName:"p"},"SubmitWordle")," message, we run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold message submit-wordle word\n")),(0,r.kt)("p",null,"This creates the ",(0,r.kt)("inlineCode",{parentName:"p"},"submit-wordle")," message that takes in ",(0,r.kt)("inlineCode",{parentName:"p"},"word")," as a parameter."),(0,r.kt)("p",null,"We now create the final message, ",(0,r.kt)("inlineCode",{parentName:"p"},"SubmitGuess"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold message submit-guess word\n")),(0,r.kt)("p",null,"Here, we are passing a word as a guess with ",(0,r.kt)("inlineCode",{parentName:"p"},"submit-guess"),"."),(0,r.kt)("h2",{id:"wordle-types"},"Wordle types"),(0,r.kt)("p",null,"For the next steps, we will be creating types to be used by\nthe messages we created."),(0,r.kt)("h3",{id:"scaffolding-wordle-types"},"Scaffolding wordle types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold map wordle word submitter --no-message\n")),(0,r.kt)("p",null,"This type is a map called ",(0,r.kt)("inlineCode",{parentName:"p"},"Wordle")," with two values of\n",(0,r.kt)("inlineCode",{parentName:"p"},"word")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"submitter"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"submitter")," is the address of the\nperson that submitted the Wordle."),(0,r.kt)("p",null,"The second type is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Guess")," type. It allows us to store\nthe latest guess for each address that submitted a solution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ignite scaffold map guess word submitter count --no-message\n")),(0,r.kt)("p",null,"Here, we are also storing ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," to count how many guesses\nthis address submitted."),(0,r.kt)("h2",{id:"keeper-functions"},"Keeper functions"),(0,r.kt)("p",null,"Now it\u2019s time to implement the Keeper functions for each\nmessage. From the Cosmos-SDK docs, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/building-modules/keeper.html"},"Keeper"),"\nis defined as the following:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The main core of a Cosmos SDK module is a piece called the keeper.\nThe keeper handles interactions with the store, has references\nto other keepers for cross-module interactions, and contains most\nof the core functionality of a module.")),(0,r.kt)("p",null,"Keeper is an abstraction on Cosmos that allows us\nto interact with the Key-Value store and change the state\nof the blockchain."),(0,r.kt)("p",null,"Here, it will help us outline the logic for each message we create."),(0,r.kt)("h3",{id:"submitwordle-function"},"SubmitWordle function"),(0,r.kt)("p",null,"We first start with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SubmitWordle")," function."),(0,r.kt)("p",null,"Open up the following file: ",(0,r.kt)("inlineCode",{parentName:"p"},"x/wordle/keeper/msg_server_submit_wordle.go")),(0,r.kt)("p",null,"Inside the following, replace the current code with the following code,\nwhich we will go over in a bit:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="x/wordle/keeper/msg_server_submit_wordle.go"',title:'"x/wordle/keeper/msg_server_submit_wordle.go"'},'package keeper\n\nimport (\n  "context"\n  "crypto/sha256"\n  "encoding/hex"\n  "wordle/x/wordle/types"\n  sdk "github.com/cosmos/cosmos-sdk/types"\n  sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"\n  "time"\n  "unicode"\n  "github.com/tendermint/tendermint/crypto"\n)\n\nfunc (k msgServer) SubmitWordle(goCtx context.Context, msg *types.MsgSubmitWordle) (*types.MsgSubmitWordleResponse, error) {\n  ctx := sdk.UnwrapSDKContext(goCtx)\n  // Check to See the Wordle is 5 letters\n  if len(msg.Word) != 5 {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle Must Be A 5 Letter Word")\n  }\n  // Check to See Only Alphabets Are Passed for the Wordle\n  if !(IsLetter(msg.Word)) {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle Must Only Consist Of Letters In The Alphabet")\n  }\n\n  // Use Current Day to Create The Index of the Newly-Submitted Wordle of the Day\n  currentTime := time.Now().Local()\n  var currentTimeBytes = []byte(currentTime.Format("2006-01-02"))\n  var currentTimeHash = sha256.Sum256(currentTimeBytes)\n  var currentTimeHashString = hex.EncodeToString(currentTimeHash[:])\n  // Hash The Newly-Submitted Wordle of the Day\n  var submittedSolutionHash = sha256.Sum256([]byte(msg.Word))\n  var submittedSolutionHashString = hex.EncodeToString(submittedSolutionHash[:])\n\n  var wordle = types.Wordle{\n    Index:     currentTimeHashString,\n    Word:      submittedSolutionHashString,\n    Submitter: msg.Creator,\n  }\n\n  // Try to Get Wordle From KV Store Using Current Day as Key\n  // This Helps ensure only one Wordle is submitted per day\n  _, isFound := k.GetWordle(ctx, currentTimeHashString)\n  if isFound {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle of the Day is Already Submitted")\n  }\n  // Write Wordle to KV Store\n  k.SetWordle(ctx, wordle)\n  reward := sdk.Coins{sdk.NewInt64Coin("token", 100)}\n  // Escrow Reward\n  submitterAddress, _ := sdk.AccAddressFromBech32(msg.Creator)\n  moduleAcct := sdk.AccAddress(crypto.AddressHash([]byte(types.ModuleName)))\n  err := k.bankKeeper.SendCoins(ctx, submitterAddress, moduleAcct, reward)\n  if err != nil {\n    return nil, err\n  }\n  return &types.MsgSubmitWordleResponse{}, nil\n}\n\nfunc IsLetter(s string) bool {\n  for _, r := range s {\n    if !unicode.IsLetter(r) {\n      return false\n    }\n  }\n  return true\n}\n')),(0,r.kt)("p",null,"Here in the ",(0,r.kt)("inlineCode",{parentName:"p"},"SubmitWordle")," Keeper function, we are doing a few things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We first ensure that a word submitted for Wordle of the Day is\n5 letters long and only uses alphabets. That means no integers can\nbe submitted in the string."),(0,r.kt)("li",{parentName:"ul"},"We then create a hash from the current day the moment the Wordle was\nsubmitted. We set this hash to the index of the Wordle type. This\nallows us to look up any guesses for this Wordle for subsequent\nguesses, which we will go over next."),(0,r.kt)("li",{parentName:"ul"},"We then check if the index for today\u2019s date is currently empty or\nnot. If it\u2019s not empty, this means a Wordle has already been\nsubmitted. Remember, only one wordle can be submitted per\nday. Everyone else has to guess the submitted wordle."),(0,r.kt)("li",{parentName:"ul"},"We also have a helper function in there to check if a string only\ncontains alphabet characters.")),(0,r.kt)("h3",{id:"submitguess-function"},(0,r.kt)("inlineCode",{parentName:"h3"},"SubmitGuess")," function"),(0,r.kt)("p",null,"The next Keeper function we will add is the following:\n",(0,r.kt)("inlineCode",{parentName:"p"},"x/wordle/keeper/msg_server_submit_guess.go")),(0,r.kt)("p",null,"Open that file and replace its contents with the following code, which we will\nexplain in a bit:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="x/wordle/keeper/msg_server_submit_guess.go"',title:'"x/wordle/keeper/msg_server_submit_guess.go"'},'package keeper\n\nimport (\n  "context"\n  "crypto/sha256"\n  "encoding/hex"\n  "wordle/x/wordle/types"\n  sdk "github.com/cosmos/cosmos-sdk/types"\n  sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"\n  "strconv"\n  "time"\n  "github.com/tendermint/tendermint/crypto"\n)\n\nfunc (k msgServer) SubmitGuess(goCtx context.Context, msg *types.MsgSubmitGuess) (*types.MsgSubmitGuessResponse, error) {\n  ctx := sdk.UnwrapSDKContext(goCtx)\n  // Check Word is 5 Characters Long\n  if len(msg.Word) != 5 {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Guess Must Be A 5 Letter Word!")\n  }\n \n  // Check String Contains Alphabet Letters Only\n  if !(IsLetter(msg.Word)) {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Guess Must Only Consist of Alphabet Letters!")\n  }\n\n  // Get Current Day to Pull Up Wordle of That Day As A Hash\n  currentTime := time.Now().Local()\n  var currentTimeBytes = []byte(currentTime.Format("2006-01-02"))\n  var currentTimeHash = sha256.Sum256(currentTimeBytes)\n  var currentTimeHashString = hex.EncodeToString(currentTimeHash[:])\n  wordle, isFound := k.GetWordle(ctx, currentTimeHashString)\n  if !isFound {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle of The Day Hasn\'t Been Submitted Yet. Feel Free to Submit One!")\n  }\n\n  // We Convert Current Day and Guesser to A Hash To Use As An Index For Today\'s Guesses For That Guesser\n  // That Way, A Person Can Guess 6 Times A Day For Each New Wordle Created\n  var currentTimeGuesserBytes = []byte(currentTime.Format("2006-01-02") + msg.Creator)\n  var currentTimeGuesserHash = sha256.Sum256(currentTimeGuesserBytes)\n  var currentTimeGuesserHashString = hex.EncodeToString(currentTimeGuesserHash[:])\n  // Hash The Guess To The Wordle\n  var submittedSolutionHash = sha256.Sum256([]byte(msg.Word))\n  var submittedSolutionHashString = hex.EncodeToString(submittedSolutionHash[:])\n\n  // Get the Latest Guess entry for this Submitter for the current Wordle of the Day\n  var count int\n  guess, isFound := k.GetGuess(ctx, currentTimeGuesserHashString)\n  if isFound {\n    // Check if Submitter Reached 6 Tries\n    if guess.Count == strconv.Itoa(6) {\n      return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "You Have Guessed The Maximum Amount of Times for The Day! Try Again Tomorrow With A New Wordle.")\n    }\n    currentCount, err := strconv.Atoi(guess.Count)\n    if err != nil {\n      panic(err)\n    }\n    count = currentCount\n  } else {\n    // Initialize Count Value If No Entry Exists for this Submitter for Today\'s Wordle\n    count = 0\n  }\n  // Increment Guess Count\n  count += 1\n  var newGuess = types.Guess{\n    Index:     currentTimeGuesserHashString,\n    Submitter: msg.Creator,\n    Word:      submittedSolutionHashString,\n    Count:     strconv.Itoa(count),\n  }\n  // Remove Current Guess Entry to be Updated With New Entry\n  k.RemoveGuess(ctx, currentTimeGuesserHashString)\n  // Add New Guess Entry\n  k.SetGuess(ctx, newGuess)\n  if !(wordle.Word == submittedSolutionHashString) {\n    return &types.MsgSubmitGuessResponse{Title: "Wrong Answer", Body: "Your Guess Was Wrong. Try Again"}, nil\n  } else {\n    // Setup Reward \n    reward := sdk.Coins{sdk.NewInt64Coin("token", 100)}\n    // If Submitter Guesses Correctly\n    guesserAddress, _ := sdk.AccAddressFromBech32(msg.Creator)\n    moduleAcct := sdk.AccAddress(crypto.AddressHash([]byte(types.ModuleName)))\n    // Send Reward\n    err := k.bankKeeper.SendCoins(ctx, moduleAcct, guesserAddress, reward)\n    if err !=nil {\n      return nil, err\n    }\n    return &types.MsgSubmitGuessResponse{Title: "Correct", Body: "You Guessed The Wordle Correctly!"}, nil\n  }\n}\n')),(0,r.kt)("p",null,"In the above code, we are doing the following things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Here, we are doing initial checks again on the word to ensure\nit\u2019s 5 characters and only alphabet characters are used, which\ncan be refactored in the future or checked within the CLI commands."),(0,r.kt)("li",{parentName:"ul"},"We then get the Wordle of the Day by getting the hash string of\nthe current day."),(0,r.kt)("li",{parentName:"ul"},"Next we create a hash string of current day and the Submitter.\nThis allows us to create a Guess type with an index that uses the\ncurrent day and the address of the submitter. This helps us when we\nface a new day and an address wants to guess the new wordle of the day.\nThe index setup ensures they can continue guessing a new wordle\nevery day up to the max of 6 tries per day."),(0,r.kt)("li",{parentName:"ul"},"We then check if that Guess type for the Submitter for today\u2019s\nwordle did reach 6 counts. If it hasn\u2019t, we increment the count.\nWe then check if the guess is correct. We store the Guess type with\nthe updated count to the state.")),(0,r.kt)("h3",{id:"protobuf-file"},"Protobuf file"),(0,r.kt)("p",null,"  A few files need to be modified for this to work."),(0,r.kt)("p",null,"The first is ",(0,r.kt)("inlineCode",{parentName:"p"},"proto/wordle/wordle/tx.proto"),"."),(0,r.kt)("p",null,"Inside this file, fill in the empty ",(0,r.kt)("inlineCode",{parentName:"p"},"MsgSubmitGuessResponse"),"\nwith the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="proto/wordle/tx.proto"',title:'"proto/wordle/tx.proto"'},"message MsgSubmitGuessResponse {\n  string title = 1;\n  string body = 2;\n}\n")),(0,r.kt)("p",null,"Next file is ",(0,r.kt)("inlineCode",{parentName:"p"},"x/wordle/types/expected_keepers.go")),(0,r.kt)("p",null,"Here, we need to add the SendCoins method to the BankKeeper\ninterface in order to allow sending the reward to the right guesser."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="x/wordle/types/expected_keepers.go"',title:'"x/wordle/types/expected_keepers.go"'},"type BankKeeper interface {\n  SendCoins(ctx sdk.Context, fromAddr sdk.AccAddress, toAddr sdk.AccAddress, amt sdk.Coins) error\n}\n")),(0,r.kt)("p",null,"With that, we implemented all our Keeper functions! Time to\ncompile the blockchain and take it out for a test drive."),(0,r.kt)("h2",{id:"run-the-wordle-chain"},"Run the wordle chain"),(0,r.kt)("h3",{id:"run-a-celestia-light-node"},"Run a Celestia light node"),(0,r.kt)("p",null,"Follow instructions to install and start your Celestia Data\nAvailalbility layer Light Node selecting the network that\nyou had previously used. You can find instructions to install\nand run the node ",(0,r.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/light-node"},"here"),"."),(0,r.kt)("p",null,"After you have Go and Ignite CLI installed, and your Celestia\nLight Node running on your machine, you're ready to build,\ntest, and launch your own sovereign rollup."),(0,r.kt)("h3",{id:"building-and-running-wordle-chain"},"Building and running wordle chain"),(0,r.kt)("p",null,"We have a handy ",(0,r.kt)("inlineCode",{parentName:"p"},"init.sh")," found in this repo\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rollkit/docs/tree/main/docs/scripts/wordle"},"here"),"."),(0,r.kt)("p",null,"We can copy it over to our directory with the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# From inside the `wordle` directory\nwget https://raw.githubusercontent.com/rollkit/docs/main/docs/scripts/wordle/init.sh\n")),(0,r.kt)("p",null,"This copies over our ",(0,r.kt)("inlineCode",{parentName:"p"},"init.sh")," script to initialize our\nWordle Rollup."),(0,r.kt)("p",null,"You can view the contents of the script to see how we\ninitialize the Wordle Rollup."),(0,r.kt)("admonition",{title:"caution",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"On some machines, before starting our rollup, we'll need to find\nand change ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagIAVLFastNode")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"FlagDisableIAVLFastNode"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="wordle/cmd/wordled/cmd/root.go"',title:'"wordle/cmd/wordled/cmd/root.go"'},"baseapp.SetIAVLDisableFastNode(cast.ToBool(appOpts.Get(server.FlagDisableIAVLFastNode))),\n")),(0,r.kt)("p",{parentName:"admonition"},"If you are on macOS, you will need to install md5sha1sum before starting your\nrollup:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brew install md5sha1sum\n"))),(0,r.kt)("p",null,"You can initialize the script with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bash init.sh\n")),(0,r.kt)("p",null,"With that, we have kickstarted our ",(0,r.kt)("inlineCode",{parentName:"p"},"wordled")," network!"),(0,r.kt)("p",null,"In another window, run the following to submit a Wordle:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wordled tx wordle submit-wordle giant --from wordle-key --keyring-backend test --chain-id wordle -b async -y\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"NOTE: We are submitting a transaction asynchronously due to avoiding\nany timeout errors. With Rollkit as a replacement to Tendermint, we\nneed to wait for Celestia's Data-Availability network to ensure a block\nwas included from Wordle, before proceeding to the next block. Currently,\nin Rollkit, the single aggregator is not moving forward with the next block\nproduction as long as it is trying to submit the current block to the DA network.\nIn the future, with leader selection, block production and sync logic improves\ndramatically.")),(0,r.kt)("p",null,"This will ask you to confirm the transaction with the following message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "body":{\n    "messages":[\n       {\n          "@type":"/YazzyYaz.wordle.wordle.MsgSubmitWordle",\n          "creator":"cosmos17lk3fgutf00pd5s8zwz5fmefjsdv4wvzyg7d74",\n          "word":"giant"\n       }\n    ],\n    "memo":"",\n    "timeout_height":"0",\n    "extension_options":[\n    ],\n    "non_critical_extension_options":[\n    ]\n  },\n  "auth_info":{\n    "signer_infos":[\n    ],\n    "fee":{\n       "amount":[\n       ],\n       "gas_limit":"200000",\n       "payer":"",\n       "granter":""\n    }\n  },\n  "signatures":[\n  ]\n}\n')),(0,r.kt)("p",null,"Cosmos-SDK will ask you to confirm the transaction here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"confirm transaction before signing and broadcasting [y/N]:\n")),(0,r.kt)("p",null,"Confirm with a Y."),(0,r.kt)("p",null,"You will then get a response with a transaction hash as shown here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'code: 0\ncodespace: ""\ndata: ""\nevents: []\ngas_used: "0"\ngas_wanted: "0"\nheight: "0"\ninfo: ""\nlogs: []\nraw_log: ""\ntimestamp: ""\ntx: null\ntxhash: F159E11116EC9505FC2C0D97E605357FEC0F3DAE06B57BFB17EA6A548905043E\n')),(0,r.kt)("p",null,"Note, this does not mean the transaction was included in the block yet.\nLet's query the transaction hash to check whether it has been included in\nthe block yet or if there are any errors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wordled query tx --type=hash F159E11116EC9505FC2C0D97E605357FEC0F3DAE06B57BFB17EA6A548905043E --chain-id wordle --output json | jq -r '.raw_log'\n")),(0,r.kt)("p",null,"This should display an output like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[{"events":[{"type":"message","attributes":[{"key":"action","value":"submit_wordle"\n}]}]}]\n')),(0,r.kt)("p",null,"Test out a few things for fun:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wordled tx wordle submit-guess 12345 --from wordle-key --keyring-backend test --chain-id wordle -b async -y\n")),(0,r.kt)("p",null,"After confirming the transaction, query the ",(0,r.kt)("inlineCode",{parentName:"p"},"txhash"),"\ngiven the same way you did above. You will see the response shows\nan Invalid Error because you submitted integers."),(0,r.kt)("p",null,"Now try:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wordled tx wordle submit-guess ABCDEFG --from wordle-key --keyring-backend test --chain-id wordle -b async -y\n")),(0,r.kt)("p",null,"After confirming the transaction, query the ",(0,r.kt)("inlineCode",{parentName:"p"},"txhash")," given the same\nway you did above. You will see the response shows\nan Invalid Error because you submitted a word larger than 5 characters."),(0,r.kt)("p",null,"Now try to submit another wordle even though one was already submitted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wordled tx wordle submit-wordle meter --from wordle-key --keyring-backend test --chain-id wordle -b async -y\n")),(0,r.kt)("p",null,"After submitting the transactions and confirming, query the ",(0,r.kt)("inlineCode",{parentName:"p"},"txhash"),"\ngiven the same way you did above. You will get an error that a wordle\nhas already been submitted for the day."),(0,r.kt)("p",null,"Now let\u2019s try to guess a five letter word:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wordled tx wordle submit-guess least --from wordle-key --keyring-backend test --chain-id wordle -b async -y\n")),(0,r.kt)("p",null,"After submitting the transactions and confirming, query the ",(0,r.kt)("inlineCode",{parentName:"p"},"txhash"),"\ngiven the same way you did above. Given you didn\u2019t guess the correct\nword, it will increment the guess count for wordle-key's account."),(0,r.kt)("p",null,"We can verify this by querying the list:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wordled q wordle list-guess --output json\n")),(0,r.kt)("p",null,"This outputs all Guess objects submitted so far, with the index\nbeing today\u2019s date and the address of the submitter."),(0,r.kt)("p",null,"With that, we implemented a basic example of Wordle using\nCosmos-SDK and Ignite and Rollkit. Read on to how you can\nextend the code base."),(0,r.kt)("h3",{id:"extending-in-the-future"},"Extending in the future"),(0,r.kt)("p",null,"You can extend the codebase and improve this tutorial by checking\nout the repository ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/wordle"},"here"),"."),(0,r.kt)("p",null,"There are many ways this codebase can be extended:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"You can improve messaging around when you guess the correct word."),(0,r.kt)("li",{parentName:"ol"},"You can hash the word prior to submitting it to the chain,\nensuring the hashing is local so that it\u2019s not revealed via\nfront-running by others monitoring the plaintext string when\nit\u2019s submitted on-chain."),(0,r.kt)("li",{parentName:"ol"},"You can improve the UI in terminal using a nice interface for\nWordle. Some examples are ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/nimblebun/wordle-cli"},"here"),"."),(0,r.kt)("li",{parentName:"ol"},"You can improve current date to stick to a specific timezone."),(0,r.kt)("li",{parentName:"ol"},"You can create a bot that submits a wordle every day at a specific time."),(0,r.kt)("li",{parentName:"ol"},"You can create a vue.js front-end with Ignite using example open-source\nrepositories ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/yyx990803/vue-wordle"},"here")," and ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/xudafeng/wordle"},"here"),".")))}c.isMDXComponent=!0},3500:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/wordle-cd3a9ac164294b1a4acd7ffa6a63fd7b.png"}}]);