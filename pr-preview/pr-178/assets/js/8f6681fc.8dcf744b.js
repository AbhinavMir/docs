"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[191],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"Ethermint (EVM) tutorial",description:"Build a sovereign rollup with Ethermint (EVM + Cosmos SDK), Celestia and Rollkit"},o="\u29eb Ethermint (EVM) rollup",l={unversionedId:"tutorials/ethermint",id:"tutorials/ethermint",title:"\u29eb Ethermint (EVM) rollup",description:"Build a sovereign rollup with Ethermint (EVM + Cosmos SDK), Celestia and Rollkit",source:"@site/docs/tutorials/ethermint.md",sourceDirName:"tutorials",slug:"/tutorials/ethermint",permalink:"/pr-preview/pr-178/docs/tutorials/ethermint",draft:!1,editUrl:"https://github.com/rollkit/docs/tree/main/docs/tutorials/ethermint.md",tags:[],version:"current",frontMatter:{sidebar_label:"Ethermint (EVM) tutorial",description:"Build a sovereign rollup with Ethermint (EVM + Cosmos SDK), Celestia and Rollkit"},sidebar:"docs",previous:{title:"Advanced",permalink:"/pr-preview/pr-178/docs/category/advanced"}},s={},u=[{value:"\ud83d\udc8e Ethermint dependencies",id:"-ethermint-dependencies",level:2},{value:"\ud83d\udcbb Hardware requirements",id:"-hardware-requirements",level:3},{value:"\ud83d\udc7e Setting up your Ethermint node",id:"-setting-up-your-ethermint-node",level:3},{value:"\ud83c\udfc3 Golang dependency",id:"-golang-dependency",level:3},{value:"\ud83d\uddde\ufe0f Rollkit installation",id:"\ufe0f-rollkit-installation",level:2},{value:"\ud83d\udc79 ethermintd installation",id:"-ethermintd-installation",level:3},{value:"\ud83d\udcbb Setting up your environment for Ethermint on Celestia",id:"-setting-up-your-environment-for-ethermint-on-celestia",level:2},{value:"\ud83c\udfc3\u200d\u2642\ufe0f Run a Celestia light node",id:"\ufe0f-run-a-celestia-light-node",level:3},{value:"\ud83c\udf00 Instantiating the Ethermint rollup",id:"-instantiating-the-ethermint-rollup",level:3},{value:"\ud83d\udcc3 Deploy a Solidity smart contract on Ethermint sovereign rollup with Foundry",id:"-deploy-a-solidity-smart-contract-on-ethermint-sovereign-rollup-with-foundry",level:2},{value:"\u2692\ufe0f About Foundry",id:"\ufe0f-about-foundry",level:3},{value:"\ud83c\udfac Getting started",id:"-getting-started",level:3},{value:"\u26a1\ufe0f Initialize development environment",id:"\ufe0f-initialize-development-environment",level:4},{value:"\ud83d\udcc3 Updating the contract and tests",id:"-updating-the-contract-and-tests",level:4},{value:"\ud83d\udcd2 Updating the deployment script",id:"-updating-the-deployment-script",level:4},{value:"\ud83c\udfe0 Deploying locally",id:"-deploying-locally",level:4},{value:"\ud83d\udfe2 Deploying to the Ethermint sovereign rollup",id:"-deploying-to-the-ethermint-sovereign-rollup",level:4}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-ethermint-evm-rollup"},"\u29eb Ethermint (EVM) rollup"),(0,i.kt)("p",null,"Ethermint is a Comsos-SDK library that integrates an EVM compiler\nfrom Geth."),(0,i.kt)("p",null,"This would allow you to deploy Solidity or Vyper Ethereum smart contracts\nin order to build Ethereum-based applications."),(0,i.kt)("p",null,"In this tutorial, we will be going over how to use Rollkit to deploy\nan Ethereum-based sovereign rollup that uses Cosmos-SDK and Ethermint."),(0,i.kt)("p",null,"You can learn more about Ethermint ",(0,i.kt)("a",{parentName:"p",href:"https://docs.ethermint.zone"},"here"),"."),(0,i.kt)("admonition",{title:"note",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This tutorial will explore developing with Rollkit,\nwhich is still in Alpha stage. If you run into bugs, please write a Github\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rollkit/docs/issues/new"},"Issue ticket"),"\nor let us know in our ",(0,i.kt)("a",{parentName:"p",href:"https://t.me/rollkit"},"Telegram"),".")),(0,i.kt)("admonition",{title:"caution",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"The script for this tutorial is built for Celestia's\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/blockspace-race"},"Blockspacerace testnet"),".\nIf you choose to use Mocha testnet or Arabica devnet,\nyou will need to modify the script manually.")),(0,i.kt)("p",null,"In this tutorial, we will go over the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#ethermint-dependencies"},"Setting Up Your Ethermint Dependencies")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rollkit-installation"},"Setting Up Rollkit on Ethermint")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#setting-up-your-environment-for-ethermint-on-celestia"},"Instantiate a local network for your Ethermint chain connected to Celestia")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#deploy-a-solidity-smart-contract-on-ethermint-sovereign-rollup-with-foundry"},"Deploying an Ethereum smart contract on your Ethermint Rollup with Foundry"))),(0,i.kt)("h2",{id:"-ethermint-dependencies"},"\ud83d\udc8e Ethermint dependencies"),(0,i.kt)("p",null,"This section will guide you through installing the dependencies\nyou need for the deployment process of an Ethermint Sovereign Rollup\non Celestia."),(0,i.kt)("h3",{id:"-hardware-requirements"},"\ud83d\udcbb Hardware requirements"),(0,i.kt)("p",null,"The following hardware minimum requirements are recommended for running\nthe full storage node:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Memory: 8 GB RAM"),(0,i.kt)("li",{parentName:"ul"},"CPU: Quad-Core"),(0,i.kt)("li",{parentName:"ul"},"Disk: 250 GB SSD Storage"),(0,i.kt)("li",{parentName:"ul"},"Bandwidth: 1 Gbps for Download/100 Mbps for Upload")),(0,i.kt)("h3",{id:"-setting-up-your-ethermint-node"},"\ud83d\udc7e Setting up your Ethermint node"),(0,i.kt)("p",null,"The following tutorial is done on an Ubuntu Linux 20.04 (LTS) x64 instance machine."),(0,i.kt)("h3",{id:"-golang-dependency"},"\ud83c\udfc3 Golang dependency"),(0,i.kt)("p",null,"The Golang version used for this tutorial is v1.18+"),(0,i.kt)("p",null,"If you are using a Linux distribution, you can install Golang\nby following our tutorial ",(0,i.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/environment#install-golang"},"here"),"."),(0,i.kt)("h2",{id:"\ufe0f-rollkit-installation"},"\ud83d\uddde\ufe0f Rollkit installation"),(0,i.kt)("h3",{id:"-ethermintd-installation"},"\ud83d\udc79 ethermintd installation"),(0,i.kt)("p",null,"Here, we are going to pull down the ",(0,i.kt)("inlineCode",{parentName:"p"},"ethermint")," from the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/ethermint"},"Celestia repository"),".\nWe will install Rollkit to this version of Ethermint.\nRollkit is a drop-in replacement for Tendermint that allows\nCosmos-SDK applications to connect to Celestia's data availability network."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/celestiaorg/ethermint.git\ncd ethermint\nmake install\n")),(0,i.kt)("p",null,"You can check if ",(0,i.kt)("inlineCode",{parentName:"p"},"ethermintd")," is installed by running the following\ncommand:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ethermintd\n")),(0,i.kt)("h2",{id:"-setting-up-your-environment-for-ethermint-on-celestia"},"\ud83d\udcbb Setting up your environment for Ethermint on Celestia"),(0,i.kt)("p",null,"Now the ",(0,i.kt)("inlineCode",{parentName:"p"},"ethermintd")," binary is built, we need to setup a local network\nthat communicates between ",(0,i.kt)("inlineCode",{parentName:"p"},"ethermintd")," and Rollkit."),(0,i.kt)("h3",{id:"\ufe0f-run-a-celestia-light-node"},"\ud83c\udfc3\u200d\u2642\ufe0f Run a Celestia light node"),(0,i.kt)("p",null,"All sovereign rollups need to submit their transaction data to\nCelestia."),(0,i.kt)("p",null,"Here, we must first setup a Celestia Light Node with testnet tokens."),(0,i.kt)("p",null,"You can do this by following this tutorial ",(0,i.kt)("a",{parentName:"p",href:"https://docs.celestia.org/developers/node-tutorial"},"here"),"."),(0,i.kt)("h3",{id:"-instantiating-the-ethermint-rollup"},"\ud83c\udf00 Instantiating the Ethermint rollup"),(0,i.kt)("p",null,"With a Celestia Light Node running in one terminal session,\nwe can proceed to generate the Ethermint rollup."),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"ethermint")," directory, we have a helpful bash script that\nallows you to instantiate a local Ethermint sovereign rollup on Celestia."),(0,i.kt)("p",null,"Run the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bash init.sh\n")),(0,i.kt)("p",null,"This bash script does everything needed to initialize your Ethermint\nrollup."),(0,i.kt)("p",null,"First, we need to setup some environment variables."),(0,i.kt)("admonition",{title:"Networks",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"The commands below are for Blockspace Race. If you're using Mocha or Arabica, you'll need to\nreplace the RPC endpoint with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/arabica-devnet#rpc-endpoints"},"one for Arabica")," or ",(0,i.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/mocha-testnet#rpc-endpoints"},"one for Mocha"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NAMESPACE_ID=$(openssl rand -hex 8)\nDA_BLOCK_HEIGHT=$(curl https://rpc-blockspacerace.pops.one/block | jq -r '.result.block.header.height')\n")),(0,i.kt)("p",null,"If you are running this on Celestia's\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/mocha-testnet"},"Mocha testnet"),"\nor Arabica devnet, you need to run your light node with an account\nthat has Mocha or Arabica tokens. Visit the faucet\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.celestia.org/nodes/arabica-devnet#arabica-devnet-faucet"},"here"),"."),(0,i.kt)("p",null,"With this setup complete, we can now start our Ethermint Rollup:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ethermintd start --rollkit.aggregator true --rollkit.da_layer celestia --rollkit.da_config=\'{"base_url":"http://localhost:26659","timeout":60000000000,"gas_limit":6000000,"fee":6000}\' --rollkit.namespace_id $NAMESPACE_ID --rollkit.da_start_height $DA_BLOCK_HEIGHT \n')),(0,i.kt)("p",null,"You should start seeing logs about the chain starting.\nThey will look similar to below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'1:27AM INF Unlocking keyring\n1:27AM INF starting ABCI with Tendermint\n1:27AM INF service start impl=EventBus module=events msg={}\n1:27AM INF service start impl=PubSub module=pubsub msg={}\nbadger 2022/11/23 01:27:54 INFO: All 0 tables opened in 0s\nbadger 2022/11/23 01:27:54 INFO: Discard stats nextEmptySlot: 0\nbadger 2022/11/23 01:27:54 INFO: Set nextTxnTs to 0\n1:27AM INF service start impl=IndexerService module=txindex msg={}\n1:27AM INF WARNING: using default DA block time DABlockTime=30000 module=BlockManager\n1:27AM INF initializing blockchain state from genesis.json\n1:27AM INF created new capability module=ibc name=ports/transfer\n1:27AM INF port binded module=x/ibc/port port=transfer\n1:27AM INF claimed capability capability=1 module=transfer name=ports/transfer\n1:27AM INF asserting crisis invariants inv=1/11 module=x/crisis name=gov/module-account\n1:27AM INF asserting crisis invariants inv=2/11 module=x/crisis name=staking/module-accounts\n1:27AM INF asserting crisis invariants inv=3/11 module=x/crisis name=staking/nonnegative-power\n1:27AM INF asserting crisis invariants inv=4/11 module=x/crisis name=staking/positive-delegation\n1:27AM INF asserting crisis invariants inv=5/11 module=x/crisis name=staking/delegator-shares\n1:27AM INF asserting crisis invariants inv=6/11 module=x/crisis name=bank/nonnegative-outstanding\n1:27AM INF asserting crisis invariants inv=7/11 module=x/crisis name=bank/total-supply\n1:27AM INF asserting crisis invariants inv=8/11 module=x/crisis name=distribution/nonnegative-outstanding\n1:27AM INF asserting crisis invariants inv=9/11 module=x/crisis name=distribution/can-withdraw\n1:27AM INF asserting crisis invariants inv=10/11 module=x/crisis name=distribution/reference-count\n1:27AM INF asserting crisis invariants inv=11/11 module=x/crisis name=distribution/module-account\n1:27AM INF asserted all invariants duration=3.783918 height=0 module=x/crisis\n1:27AM INF service start impl=RPC msg={}\n1:27AM INF service start impl=Node msg={}\n1:27AM INF serving HTTP listen address={"IP":"127.0.0.1","Port":26657,"Zone":""}\n1:27AM INF starting P2P client\n1:27AM INF listening on address=/ip4/143.244.145.92/tcp/26656/p2p/12D3KooWCrCqYheUBURCzzUqgxWFVFvFYPJ6nonTPN9uVQ4cXK5H module=p2p\n1:27AM INF listening on address=/ip4/127.0.0.1/tcp/26656/p2p/12D3KooWCrCqYheUBURCzzUqgxWFVFvFYPJ6nonTPN9uVQ4cXK5H module=p2p\n1:27AM INF no seed nodes - only listening for connections module=p2p\n1:27AM INF starting Celestia Data Availability Layer Client baseURL=http://localhost:26659 module=da_client\n1:27AM INF working in aggregator mode block time=30000\n1:27AM INF Creating and publishing block height=1 module=BlockManager\n1:27AM INF minted coins from module account amount=2059726034250856481aphoton from=mint module=x/bank\n1:27AM INF submitting block to DA layer height=1 module=BlockManager\n1:28AM INF Starting JSON-RPC server address=0.0.0.0:8545\n1:28AM INF Starting JSON WebSocket server address=0.0.0.0:8546\n1:28AM INF successfully submitted rollkit block to DA layer daHeight=25422 module=BlockManager rollkitHeight=1\n1:28AM INF commit synced commit=436F6D6D697449447B5B323130203138352031373920362035322031333820373020313032203135322038302032323920313232203132342036332031382032313920313039203337203832203631203334203139302031323520393020323133203835203232382032323420323232203134203739203131305D3A317D\n1:28AM INF indexed block height=1 module=txindex\n1:28AM INF Creating and publishing block height=2 module=BlockManager\n1:28AM INF minted coins from module account amount=2059726403014551280aphoton from=mint module=x/bank\n1:28AM INF submitting block to DA layer height=2 module=BlockManager\n1:28AM INF successfully submitted rollkit block to DA layer daHeight=25423 module=BlockManager rollkitHeight=2\n1:28AM INF commit synced commit=436F6D6D697449447B5B3630203231332038372032313820383920313920323034203230322031363320383120323235203235352036352032323820313530203232392032333320323139203233322032343420313334203337203134342031303320313634203138382031393720323339203230342032303120323138203130325D3A327D\n1:28AM INF indexed block height=2 module=txindex\n1:28AM INF Creating and publishing block height=3 module=BlockManager\n1:28AM INF minted coins from module account amount=2059726771778267119aphoton from=mint module=x/bank\n1:28AM INF submitting block to DA layer height=3 module=BlockManager\n1:29AM INF successfully submitted rollkit block to DA layer daHeight=25424 module=BlockManager rollkitHeight=3\n1:29AM INF commit synced commit=436F6D6D697449447B5B313520323038203831203131203235332032322037322031393020333220323130203634203235332032303920313839203934203137203431203135203230302039362031383920323820313736203132332037352032392031393320313831203134312032303520323231203232325D3A337D\n1:29AM INF indexed block height=3 module=txindex\n1:29AM INF Creating and publishing block height=4 module=BlockManager\n1:29AM INF minted coins from module account amount=2059727140542003996aphoton from=mint module=x/bank\n1:29AM INF submitting block to DA layer height=4 module=BlockManager\n1:29AM INF successfully submitted rollkit block to DA layer daHeight=25425 module=BlockManager rollkitHeight=4\n1:29AM INF commit synced commit=436F6D6D697449447B5B313433203332203639203732203134342034352037302034302032392032303120393720313137203235312031393320313738203137362031353920323038203231372036312032362031353720353320393820323234203230352031373020313920313034203138372031323220385D3A347D\n1:29AM INF indexed block height=4 module=txindex\n1:29AM INF Creating and publishing block height=5 module=BlockManager\n')),(0,i.kt)("p",null,"With that, we have kickstarted our ",(0,i.kt)("inlineCode",{parentName:"p"},"ethermintd")," network!"),(0,i.kt)("h2",{id:"-deploy-a-solidity-smart-contract-on-ethermint-sovereign-rollup-with-foundry"},"\ud83d\udcc3 Deploy a Solidity smart contract on Ethermint sovereign rollup with Foundry"),(0,i.kt)("p",null,"In this guide you'll learn how to deploy a Solidity smart contract to\nthe Ethermint chain you just instantiated on Celestia with\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/foundry-rs/foundry"},"Foundry"),"."),(0,i.kt)("h3",{id:"\ufe0f-about-foundry"},"\u2692\ufe0f About Foundry"),(0,i.kt)("p",null,"Foundry is a portable, fast and modular toolkit for Ethereum application development."),(0,i.kt)("p",null,"Foundry is made up of three components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/foundry-rs/foundry/tree/master/forge"},(0,i.kt)("strong",{parentName:"a"},"Forge"))," - Ethereum\ntesting framework (like Truffle, Hardhat and DappTools)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/foundry-rs/foundry/tree/master/cast"},(0,i.kt)("strong",{parentName:"a"},"Cast"))," - CLI for\ninteracting with EVM smart contracts, sending transactions, and getting chain data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/foundry-rs/foundry/tree/master/anvil"},(0,i.kt)("strong",{parentName:"a"},"Anvil"))," - Local\nEthereum node, similar to Ganache or Hardhat Network.")),(0,i.kt)("p",null,"We'll use all three to create, test, and deploy our Solidity project."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"To learn more about Foundry, check out the ",(0,i.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh"},"Foundry Book"),".")),(0,i.kt)("h3",{id:"-getting-started"},"\ud83c\udfac Getting started"),(0,i.kt)("h4",{id:"\ufe0f-initialize-development-environment"},"\u26a1\ufe0f Initialize development environment"),(0,i.kt)("p",null,"First, be sure to\n",(0,i.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/getting-started/installation.html"},"install Foundry"),"\non your local development environment."),(0,i.kt)("p",null,"Next, create a new project and change into the directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"forge init celestia-ethermint-app\ncd celestia-ethermint-app\n")),(0,i.kt)("p",null,"Foundry has created an example smart contract located at ",(0,i.kt)("inlineCode",{parentName:"p"},"src/Counter.sol"),"."),(0,i.kt)("h4",{id:"-updating-the-contract-and-tests"},"\ud83d\udcc3 Updating the contract and tests"),(0,i.kt)("p",null,"Let's update the contracts to include a basic counter example. Open the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Counter.sol")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," directory and add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract Counter {\n    int private count;\n    \n    constructor(int _count) {\n        count = _count;\n    }\n\n    function incrementCounter() public {\n        count += 1;\n    }\n    function decrementCounter() public {\n        count -= 1;\n    }\n\n    function getCount() public view returns (int) {\n        return count;\n    }\n}\n")),(0,i.kt)("p",null,"Next, let's create a test for this contract."),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"test/Counter.T.Sol")," and update the code with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\nimport 'src/Counter.sol';\n\ncontract CounterTest is Test {\n    Counter counter;\n    function setUp() public {\n        counter = new Counter(10);\n    }\n\n    function testGetCount() public {\n        int value = counter.getCount();\n        assertEq(value, 10);\n        emit log_int(value);\n    }\n\n    function testIncrement() public {\n        counter.incrementCounter();\n        counter.incrementCounter();\n        int value = counter.getCount();\n        assertEq(value, 12);\n        emit log_int(value);\n    }\n\n    function testDecrement() public {\n        counter.decrementCounter();\n        int value = counter.getCount();\n        assertEq(value, 9);\n        emit log_int(value);\n    }\n}\n")),(0,i.kt)("p",null,"Foundry uses ",(0,i.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/ds-test.html"},"Dappsys Test")," to\nprovide basic logging and assertion functionality. It's included in the Forge\nStandard Library."),(0,i.kt)("p",null,"Here, we are using ",(0,i.kt)("inlineCode",{parentName:"p"},"assertEq")," to assert equality. You can view all of the assertion\nfunctions available\n",(0,i.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/ds-test.html?highlight=log_int#asserting"},"here"),"."),(0,i.kt)("p",null,"Next, we can test the contract using ",(0,i.kt)("strong",{parentName:"p"},"Forge")," with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"forge test -vv\n")),(0,i.kt)("p",null,"A successful test will have output similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"[\u280a] Compiling...\n[\u2830] Installing solc version 0.8.17\n[\u2812] Successfully installed solc 0.8.17\n[\u2806] Compiling 18 files with 0.8.17\n[\u2811] Solc 0.8.17 finished in 3.59s\nCompiler run successful\n\nRunning 3 tests for test/Counter.t.sol:ContractTest\n[PASS] testDecrement() (gas: 12350)\nLogs:\n  9\n\n[PASS] testGetCount() (gas: 8510)\nLogs:\n  10\n\n[PASS] testIncrement() (gas: 13285)\nLogs:\n  12\n\nTest result: ok. 3 passed; 0 failed; finished in 2.24ms\n")),(0,i.kt)("h4",{id:"-updating-the-deployment-script"},"\ud83d\udcd2 Updating the deployment script"),(0,i.kt)("p",null,"Now that we've tested the contract, let's try deploying it locally using\n",(0,i.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/tutorials/solidity-scripting.html"},"Solidity Scripting"),"."),(0,i.kt)("p",null,"To do so, update the deloyment script at ",(0,i.kt)("inlineCode",{parentName:"p"},"script/Counter.s.sol")," with the\nfollowing code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport "forge-std/Script.sol";\n\nimport {Counter} from "src/Counter.sol";\n\ncontract CounterScript is Script {\n    function setUp() public {}\n\n    function run() public {\n        vm.startBroadcast();\n        new Counter(10);\n        vm.stopBroadcast();\n    }\n}\n')),(0,i.kt)("p",null,"Now we can use this script to deploy our smart contract to either a live or\ntest network."),(0,i.kt)("h4",{id:"-deploying-locally"},"\ud83c\udfe0 Deploying locally"),(0,i.kt)("p",null,"Next start Anvil, the local testnet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"anvil --port 9545\n")),(0,i.kt)("p",null,"Once started, Anvil will give you a local RPC endpoint as well as a handful\nof Private Keys and Accounts that you can use."),(0,i.kt)("p",null,"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"ANVIL_KEY")," with one of the private keys generated by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export ANVIL_KEY=<anvil-private-key>\n")),(0,i.kt)("p",null,"And set the RPC URL as an environment variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export RPC_URL=http://127.0.0.1:9545\n")),(0,i.kt)("p",null,"We can now use the local RPC along with one of the private keys to\ndeploy locally from the ",(0,i.kt)("inlineCode",{parentName:"p"},"celestia-ethermint-app")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"forge script script/Counter.s.sol:CounterScript --fork-url \\\n$RPC_URL  --private-key $ANVIL_KEY --broadcast\n")),(0,i.kt)("p",null,"Once the contract has been deployed locally, Anvil will log out the contract address."),(0,i.kt)("p",null,"Next, set the contract address as an environment variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export CONTRACT_ADDRESS=<contract-address>\n")),(0,i.kt)("p",null,"We can then test sending transactions to it with ",(0,i.kt)("inlineCode",{parentName:"p"},"cast send"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cast send $CONTRACT_ADDRESS "incrementCounter()" \\\n--private-key $ANVIL_KEY --rpc-url $RPC_URL\n')),(0,i.kt)("p",null,"We can then perform read operations with ",(0,i.kt)("inlineCode",{parentName:"p"},"cast call"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cast call $CONTRACT_ADDRESS "getCount()(int)" --rpc-url $RPC_URL\n')),(0,i.kt)("h4",{id:"-deploying-to-the-ethermint-sovereign-rollup"},"\ud83d\udfe2 Deploying to the Ethermint sovereign rollup"),(0,i.kt)("p",null,"Now that we've deployed and tested locally, we can deploy to our\nEthermint chain."),(0,i.kt)("p",null,"First, we will need to export the private key generated by\nthe ethermint ",(0,i.kt)("inlineCode",{parentName:"p"},"init.sh")," script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"PRIVATE_KEY=$(ethermintd keys unsafe-export-eth-key mykey --keyring-backend test)\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"NOTE: Here, the key name from ",(0,i.kt)("inlineCode",{parentName:"p"},"init.sh")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"mykey")," but you can modify\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"init.sh")," to change the name of your key.")),(0,i.kt)("p",null,"Now, we can start deploying the smart contract to our Ethermint chain."),(0,i.kt)("p",null,"To do so, run the following script from the\n",(0,i.kt)("inlineCode",{parentName:"p"},"celestia-ethermint-app")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"forge script script/Counter.s.sol:CounterScript \\\n--rpc-url http://localhost:8545 --private-key $PRIVATE_KEY --broadcast\n")),(0,i.kt)("p",null,"Set the contract address in the output as the ",(0,i.kt)("inlineCode",{parentName:"p"},"CONTRACT_ADDRESS")," variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export CONTRACT_ADDRESS=<new-contract-address>\n")),(0,i.kt)("p",null,"Once the contract has been deployed to the Ethermint rollup, we can\nuse ",(0,i.kt)("inlineCode",{parentName:"p"},"cast send")," to test sending transactions to it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cast send $CONTRACT_ADDRESS "incrementCounter()" \\\n--rpc-url http://localhost:8545 --private-key $PRIVATE_KEY \n')),(0,i.kt)("p",null,"We can then perform read operations with ",(0,i.kt)("inlineCode",{parentName:"p"},"cast call"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cast call $CONTRACT_ADDRESS "getCount()(int)" --rpc-url http://localhost:8545\n')))}p.isMDXComponent=!0}}]);