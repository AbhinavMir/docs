"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),k=i,m=d["".concat(s,".").concat(k)]||d[k]||u[k]||l;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=k;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[d]="string"==typeof e?e:i,o[1]=r;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const l={sidebar_label:"Using Rollkit CLI",description:"How to use the Rollkit command line interface (CLI)"},o="Using Rollkit CLI",r={unversionedId:"tutorials/using-rollkit-cli",id:"tutorials/using-rollkit-cli",title:"Using Rollkit CLI",description:"How to use the Rollkit command line interface (CLI)",source:"@site/docs/tutorials/using-rollkit-cli.md",sourceDirName:"tutorials",slug:"/tutorials/using-rollkit-cli",permalink:"/pr-preview/pr-171/docs/tutorials/using-rollkit-cli",draft:!1,editUrl:"https://github.com/rollkit/docs/tree/main/docs/tutorials/using-rollkit-cli.md",tags:[],version:"current",frontMatter:{sidebar_label:"Using Rollkit CLI",description:"How to use the Rollkit command line interface (CLI)"},sidebar:"docs",previous:{title:"Beginner",permalink:"/pr-preview/pr-171/docs/category/beginner"},next:{title:"Building & deploying a rollup",permalink:"/pr-preview/pr-171/docs/tutorials/building-and-deploying-a-rollup"}},s={},p=[{value:"About the CLI",id:"about-the-cli",level:2},{value:"Installing the CLI",id:"installing-the-cli",level:2},{value:"Install",id:"install",level:3},{value:"Reinstall",id:"reinstall",level:3},{value:"Directory Root",id:"directory-root",level:2},{value:"Initialize",id:"initialize",level:2},{value:"Genesis",id:"genesis",level:3},{value:"Fields",id:"fields",level:4},{value:"Sample <code>genesis.json</code>",id:"sample-genesisjson",level:4},{value:"Run",id:"run",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Formatting",id:"formatting",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Broadcast API",id:"broadcast-api",level:2},{value:"Rollkit Networks",id:"rollkit-networks",level:2},{value:"Local Network",id:"local-network",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-rollkit-cli"},"Using Rollkit CLI"),(0,i.kt)("p",null,"This is a guide to using ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit")," software from the command line.\nIt assumes only that you have the ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit")," binary installed and have\na basic understanding of what ",(0,i.kt)("a",{parentName:"p",href:"https://rollkit.dev/"},"Rollkit")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cometbft/cometbft/tree/main/abci#application-blockchain-interface-abci"},"ABCI"),"\nare."),(0,i.kt)("p",null,"You can see the help menu with ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit --help"),", and the version\nnumber with ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit version"),"."),(0,i.kt)("h2",{id:"about-the-cli"},"About the CLI"),(0,i.kt)("p",null,"The Rollkit CLI is a tool that allows you to run different kinds of nodes for a\nRollkit network while also helping you generate the required configuration files."),(0,i.kt)("h2",{id:"installing-the-cli"},"Installing the CLI"),(0,i.kt)("h3",{id:"install"},"Install"),(0,i.kt)("p",null,"NOTE: Requires Go version >= 1.19."),(0,i.kt)("p",null,"If you have not already cloned the ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit/rollkit")," repo, you will need to.\nTo install ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit"),", simply run the following command at the root of the\nRollkit repo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go install ./cmd/rollkit\n")),(0,i.kt)("p",null,"The latest Rollkit is now installed. You can verify the installation by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rollkit version\n")),(0,i.kt)("h3",{id:"reinstall"},"Reinstall"),(0,i.kt)("p",null,"If you have Rollkit installed, and you make updates that you want to test,\nsimply run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go install ./cmd/rollkit\n")),(0,i.kt)("h2",{id:"directory-root"},"Directory Root"),(0,i.kt)("p",null,"The default directory for blockchain data is ",(0,i.kt)("inlineCode",{parentName:"p"},"$HOME/.rollkit"),". Override\nthis by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"RKHOME")," environment variable."),(0,i.kt)("h2",{id:"initialize"},"Initialize"),(0,i.kt)("p",null,"Initialize the root directory by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"rollkit init\n")),(0,i.kt)("p",null,"This will create a new private key (",(0,i.kt)("inlineCode",{parentName:"p"},"priv_validator_key.json"),"), and a\ngenesis file (",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json"),") containing the associated public key, in\n",(0,i.kt)("inlineCode",{parentName:"p"},"$RKHOME/config"),". This is all that's necessary to run a local testnet\nwith one sequencer."),(0,i.kt)("h3",{id:"genesis"},"Genesis"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json")," file in ",(0,i.kt)("inlineCode",{parentName:"p"},"$RKHOME/config/")," defines the initial\nRollkit state (similar to Comet BFT state) upon genesis of the blockchain (",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cometbft/cometbft/blob/main/types/genesis.go"},"see\ndefinition"),")."),(0,i.kt)("h4",{id:"fields"},"Fields"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"genesis_time"),": Official time of blockchain start."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chain_id"),": ID of the blockchain. ",(0,i.kt)("strong",{parentName:"li"},"This must be unique for\nevery blockchain.")," If your testnet blockchains do not have unique\nchain IDs, you will have a bad time. The ChainID must be less than 50 symbols."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initial_height"),": Height at which Rollkit should begin at. If a blockchain is conducting a network upgrade,\nstarting from the stopped height brings uniqueness to previous heights."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"consensus_params")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cometbft/cometbft/blob/main/spec/core/data_structures.md#consensusparams"},"spec"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"block"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_bytes"),": Max block size, in bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_gas"),": Max gas per block."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"time_iota_ms"),": Minimum time increment between consecutive blocks (in\nmilliseconds). If the block header timestamp is ahead of the system clock,\ndecrease this value."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"evidence"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_age_num_blocks"),": Max age of evidence, in blocks. The basic formula\nfor calculating this is: MaxAgeDuration / {average block time}."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_age_duration"),': Max age of evidence, in time. It should correspond\nwith an app\'s "unbonding period" or other similar mechanism for handling\n',(0,i.kt)("a",{parentName:"li",href:"https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed"},"Nothing-At-Stake\nattacks"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_num"),": This sets the maximum number of evidence that can be committed\nin a single block. and should fall comfortably under the max block\nbytes when we consider the size of each evidence."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validator"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pub_key_types"),": Public key types validators can use."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"version"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"app_version"),": ABCI application version."))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"validators"),": List of initial validators. Note this may be overridden entirely by the\napplication, and may be left empty to make explicit that the\napplication will initialize the validator set with ResponseInitChain.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pub_key"),": The first element specifies the ",(0,i.kt)("inlineCode",{parentName:"li"},"pub_key")," type. 1\n== Ed25519. The second element are the pubkey bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"power"),": The validator's voting power."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": Name of the validator (optional)."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"app_hash"),": The expected application hash (as returned by the\n",(0,i.kt)("inlineCode",{parentName:"li"},"ResponseInfo")," ABCI message) upon genesis. If the app's hash does\nnot match, Rollkit will panic."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"app_state"),": The application state (e.g. initial distribution\nof tokens).")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,i.kt)("strong",{parentName:"p"},"ChainID must be unique to every blockchain. Reusing old chainID can cause issues"))),(0,i.kt)("h4",{id:"sample-genesisjson"},"Sample ",(0,i.kt)("inlineCode",{parentName:"h4"},"genesis.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "genesis_time": "2020-04-21T11:17:42.341227868Z",\n  "chain_id": "test-chain-ROp9KF",\n  "initial_height": "0",\n  "consensus_params": {\n    "block": {\n      "max_bytes": "22020096",\n      "max_gas": "-1",\n      "time_iota_ms": "1000"\n    },\n    "evidence": {\n      "max_age_num_blocks": "100000",\n      "max_age_duration": "172800000000000",\n      "max_num": 50,\n    },\n    "validator": {\n      "pub_key_types": [\n        "ed25519"\n      ]\n    }\n  },\n  "validators": [\n    {\n      "address": "B547AB87E79F75A4A3198C57A8C2FDAF8628CB47",\n      "pub_key": {\n        "type": "tendermint/PubKeyEd25519",\n        "value": "P/V6GHuZrb8rs/k1oBorxc6vyXMlnzhJmv7LmjELDys="\n      },\n      "power": "10",\n      "name": ""\n    }\n  ],\n  "app_hash": ""\n}\n')),(0,i.kt)("h2",{id:"run"},"Run"),(0,i.kt)("p",null,"To run a Rollkit node, use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rollkit node\n")),(0,i.kt)("p",null,"By default, Rollkit will try to connect to an ABCI application on\n",(0,i.kt)("inlineCode",{parentName:"p"},"127.0.0.1:26658"),". If you have the ",(0,i.kt)("inlineCode",{parentName:"p"},"kvstore")," ABCI app installed, run it in\nanother window. If you don't, kill Rollkit and run an in-process version of\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"kvstore")," app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'rollkit node --proxy_app=kvstore --rollkit.aggregator true --rollkit.da_layer celestia --rollkit.da_config=\'{"base_url":"http://localhost:26659","timeout":60000000000,"fee":6000,"gas_limit":6000000}\' --rollkit.namespace_id $NAMESPACE_ID\n')),(0,i.kt)("p",null,"After a few seconds, you should see blocks start streaming in."),(0,i.kt)("p",null,"Rollkit supports in-process versions of the ",(0,i.kt)("inlineCode",{parentName:"p"},"counter"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"kvstore"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"noop"),"\napps that ship as examples with ",(0,i.kt)("inlineCode",{parentName:"p"},"abci-cli"),". It's easy to compile your app\nin-process with Rollkit if it's written in Go. If your app is not written in\nGo, run it in another process, and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--proxy_app")," flag to specify the\naddress of the socket it is listening on, for instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rollkit node --proxy_app=/var/run/abci.sock\n")),(0,i.kt)("p",null,"You can find out what flags are supported by running ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit node --help"),"."),(0,i.kt)("h2",{id:"transactions"},"Transactions"),(0,i.kt)("p",null,"To send a transaction, use ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," to make requests to the Rollkit RPC\nserver, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://localhost:26657/broadcast_tx_commit?tx=\\"abcd\\"\n')),(0,i.kt)("p",null,"We can see the chain's status at the ",(0,i.kt)("inlineCode",{parentName:"p"},"/status")," end-point:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:26657/status | json_pp\n")),(0,i.kt)("p",null,"And the ",(0,i.kt)("inlineCode",{parentName:"p"},"latest_app_hash")," in particular:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:26657/status | json_pp | grep latest_app_hash\n")),(0,i.kt)("p",null,"Visit ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:26657")," in your browser to see the list of other\nendpoints. Some take no arguments (like ",(0,i.kt)("inlineCode",{parentName:"p"},"/status"),"), while others specify\nthe argument name and use ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," as a placeholder."),(0,i.kt)("h3",{id:"formatting"},"Formatting"),(0,i.kt)("p",null,"The following nuances when sending/formatting transactions should be\ntaken into account:"),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"GET"),":"),(0,i.kt)("p",null,"To send a UTF8 string byte array, quote the value of the tx parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"curl 'http://localhost:26657/broadcast_tx_commit?tx=\"hello\"'\n")),(0,i.kt)("p",null,'which sends a 5 byte transaction: "h e l l o" ',"[","68 65 6c 6c 6f","]","."),(0,i.kt)("p",null,"Note the URL must be wrapped with single quotes, else bash will ignore\nthe double quotes. To avoid the single quotes, escape the double quotes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl http://localhost:26657/broadcast_tx_commit?tx=\\"hello\\"\n')),(0,i.kt)("p",null,"Using a special character:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"curl 'http://localhost:26657/broadcast_tx_commit?tx=\"\u20ac5\"'\n")),(0,i.kt)("p",null,'sends a 4 byte transaction: "\u20ac5" (UTF8) ',"[","e2 82 ac 35","]","."),(0,i.kt)("p",null,"To send as raw hex, omit quotes AND prefix the hex string with ",(0,i.kt)("inlineCode",{parentName:"p"},"0x"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"curl http://localhost:26657/broadcast_tx_commit?tx=0x01020304\n")),(0,i.kt)("p",null,"which sends a 4 byte transaction: ","[","01 02 03 04","]","."),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," (using ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"), the raw hex must be ",(0,i.kt)("inlineCode",{parentName:"p"},"base64")," encoded:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl --data-binary \'{"jsonrpc":"2.0","id":"anything","method":"broadcast_tx_commit","params": {"tx": "AQIDBA=="}}\' -H \'content-type:text/plain;\' http://localhost:26657\n')),(0,i.kt)("p",null,"which sends the same 4 byte transaction: ","[","01 02 03 04","]","."),(0,i.kt)("p",null,"Note that raw hex cannot be used in ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," transactions."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Rollkit uses a ",(0,i.kt)("inlineCode",{parentName:"p"},"config.toml")," for configuration."),(0,i.kt)("p",null,"Notable options include the socket address of the application\n(",(0,i.kt)("inlineCode",{parentName:"p"},"proxy_app"),"), the listening address of the Rollkit peer\n(",(0,i.kt)("inlineCode",{parentName:"p"},"p2p.laddr"),"), and the listening address of the RPC server\n(",(0,i.kt)("inlineCode",{parentName:"p"},"rpc.laddr"),")."),(0,i.kt)("p",null,"Some fields from the config file can be overwritten with flags."),(0,i.kt)("h2",{id:"broadcast-api"},"Broadcast API"),(0,i.kt)("p",null,"Earlier, we used the ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx_commit")," endpoint to send a\ntransaction. When a transaction is sent to a Rollkit node, it will\nrun via ",(0,i.kt)("inlineCode",{parentName:"p"},"CheckTx")," against the application. If it passes ",(0,i.kt)("inlineCode",{parentName:"p"},"CheckTx"),", it\nwill be included in the mempool, broadcasted to other peers, and\neventually included in a block."),(0,i.kt)("p",null,"Since there are multiple phases to processing a transaction, we offer\nmultiple endpoints to broadcast a transaction:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md"},"/broadcast_tx_async\n/broadcast_tx_sync\n/broadcast_tx_commit\n")),(0,i.kt)("p",null,"These correspond to no-processing, processing through the mempool, and\nprocessing through a block, respectively. That is, ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx_async"),",\nwill return right away without waiting to hear if the transaction is\neven valid, while ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx_sync")," will return with the result of\nrunning the transaction through ",(0,i.kt)("inlineCode",{parentName:"p"},"CheckTx"),". Using ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx_commit"),"\nwill wait until the transaction is committed in a block or until some\ntimeout is reached, but will return right away if the transaction does\nnot pass ",(0,i.kt)("inlineCode",{parentName:"p"},"CheckTx"),". The return value for ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx_commit")," includes\ntwo fields, ",(0,i.kt)("inlineCode",{parentName:"p"},"check_tx")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"deliver_tx"),", pertaining to the result of\nrunning the transaction through those ABCI messages."),(0,i.kt)("p",null,"The benefit of using ",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx_commit")," is that the request returns\nafter the transaction is committed (i.e. included in a block), but that\ncan take on the order of a second. For a quick result, use\n",(0,i.kt)("inlineCode",{parentName:"p"},"broadcast_tx_sync"),", but the transaction will not be committed until\nlater, and by that point its effect on the state may change."),(0,i.kt)("p",null,"Note the mempool does not provide strong guarantees - just because a tx passed\nCheckTx (ie. was accepted into the mempool), doesn't mean it will be committed,\nas nodes with the tx in their mempool may crash before they get to propose."),(0,i.kt)("h2",{id:"rollkit-networks"},"Rollkit Networks"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"rollkit init")," is run, both a ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"priv_validator_key.json")," are created in ",(0,i.kt)("inlineCode",{parentName:"p"},"$HOME/.rollkit/config"),". The\n",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json")," might look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "validators" : [\n    {\n      "pub_key" : {\n        "value" : "h3hk+QE8c6QLTySp8TcfzclJw/BG79ziGB/pIA+DfPE=",\n        "type" : "tendermint/PubKeyEd25519"\n      },\n      "power" : 10,\n      "name" : ""\n    }\n  ],\n  "app_hash" : "",\n  "chain_id" : "test-chain-rDlYSN",\n  "genesis_time" : "0001-01-01T00:00:00Z"\n}\n')),(0,i.kt)("p",null,"And the ",(0,i.kt)("inlineCode",{parentName:"p"},"priv_validator_key.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "last_step" : 0,\n  "last_round" : "0",\n  "address" : "B788DEDE4F50AD8BC9462DE76741CCAFF87D51E2",\n  "pub_key" : {\n    "value" : "h3hk+QE8c6QLTySp8TcfzclJw/BG79ziGB/pIA+DfPE=",\n    "type" : "tendermint/PubKeyEd25519"\n  },\n  "last_height" : "0",\n  "priv_key" : {\n    "value" : "JPivl82x+LfVkp8i3ztoTjY6c6GJ4pBxQexErOCyhwqHeGT5ATxzpAtPJKnxNx/NyUnD8Ebv3OIYH+kgD4N88Q==",\n    "type" : "tendermint/PrivKeyEd25519"\n  }\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"priv_validator_key.json")," actually contains a private key, and should\nthus be kept absolutely secret; for now we work with the plain text.\nNote the ",(0,i.kt)("inlineCode",{parentName:"p"},"last_")," fields, which are used to prevent us from signing\nconflicting messages."),(0,i.kt)("p",null,"Note also that the ",(0,i.kt)("inlineCode",{parentName:"p"},"pub_key")," (the public key) in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"priv_validator_key.json")," is also present in the ",(0,i.kt)("inlineCode",{parentName:"p"},"genesis.json"),"."),(0,i.kt)("h3",{id:"local-network"},"Local Network"),(0,i.kt)("p",null,"To run a network locally, say on a single machine, you must change the ",(0,i.kt)("inlineCode",{parentName:"p"},"_laddr"),"\nfields in the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.toml")," (or using the flags) so that the listening\naddresses of the various sockets don't conflict. Additionally, you must set\n",(0,i.kt)("inlineCode",{parentName:"p"},"addr_book_strict=false")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.toml"),"."))}d.isMDXComponent=!0}}]);