"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[193],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var o=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,l=function(e,t){if(null==e)return{};var r,o,l={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var r=e.components,l=e.mdxType,n=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),k=l,f=d["".concat(s,".").concat(k)]||d[k]||u[k]||n;return r?o.createElement(f,a(a({ref:t},p),{},{components:r})):o.createElement(f,a({ref:t},p))}));function f(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=r.length,a=new Array(n);a[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:l,a[1]=i;for(var c=2;c<n;c++)a[c]=r[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}k.displayName="MDXCreateElement"},8793:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var o=r(7462),l=(r(7294),r(3905));const n={sidebar_position:2,sidebar_label:"Rollkit Stack",description:"Intro to Rollkit's stack, a modular framework for rollups."},a="The Rollkit Stack",i={unversionedId:"rollkit-stack",id:"rollkit-stack",title:"The Rollkit Stack",description:"Intro to Rollkit's stack, a modular framework for rollups.",source:"@site/docs/rollkit-stack.md",sourceDirName:".",slug:"/rollkit-stack",permalink:"/pr-preview/pr-73/docs/rollkit-stack",draft:!1,editUrl:"https://github.com/rollkit/docs/tree/main/docs/rollkit-stack.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Rollkit Stack",description:"Intro to Rollkit's stack, a modular framework for rollups."},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/pr-preview/pr-73/docs/intro"},next:{title:"Tutorials",permalink:"/pr-preview/pr-73/docs/category/tutorials"}},s={},c=[{value:"Rollup Application Dependencies",id:"rollup-application-dependencies",level:2},{value:"Mempool",id:"mempool",level:2},{value:"State Fraud Proofs",id:"state-fraud-proofs",level:2},{value:"P2P-Layer",id:"p2p-layer",level:2},{value:"DA-Access",id:"da-access",level:2},{value:"Rollkit Node Types",id:"rollkit-node-types",level:2},{value:"Sequencer node",id:"sequencer-node",level:3},{value:"Full node",id:"full-node",level:3},{value:"Light node",id:"light-node",level:3},{value:"Block-Manager",id:"block-manager",level:2},{value:"RPC Layer",id:"rpc-layer",level:2}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"the-rollkit-stack"},"The Rollkit Stack"),(0,l.kt)("p",null,"This section will cover the dependencies and customizeable components of Rollkit."),(0,l.kt)("p",null,"Roll-up sequencer nodes collect transactions from users, aggregate them into blocks, and post the blocks onto Celestia (or other DA layer) to be ordered and finalized. Full nodes execute and verify roll-up blocks, and propagate fraud-proofs when needed. Light clients receive headers, verify fraud proofs, and can authenticate trust-minimized queries about the state."),(0,l.kt)("admonition",{title:"Tip",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If you're familiar with Rollkit's stack, you may want to skip to the ",(0,l.kt)("a",{parentName:"p",href:"../category/tutorials"},"tutorials section"))),(0,l.kt)("p",null,"For an understanding of the Rollkit stack, let's first look at the key components of a rollup. A typical rollup has:"),(0,l.kt)("h2",{id:"rollup-application-dependencies"},"Rollup Application Dependencies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Requires Golang version 1.19+")),(0,l.kt)("h2",{id:"mempool"},"Mempool"),(0,l.kt)("p",null,"The mempool keeps the set of pending transactions, and is used by block\nproducers (full nodes) to produce blocks. Transactions are handled by\nnodes in the First-Come, First-Served (FCFS) manner. Ordering of transactions\ncan be implemented on the application level (for example by adding\nnonce/sequence number). This behaviour is similar to the Tendermint mempool."),(0,l.kt)("h2",{id:"state-fraud-proofs"},"State Fraud Proofs"),(0,l.kt)("h2",{id:"p2p-layer"},"P2P-Layer"),(0,l.kt)("h2",{id:"da-access"},"DA-Access"),(0,l.kt)("h2",{id:"rollkit-node-types"},"Rollkit Node Types"),(0,l.kt)("h3",{id:"sequencer-node"},"Sequencer node"),(0,l.kt)("p",null,"Some roll-ups utilize ",(0,l.kt)("em",{parentName:"p"},"sequencer nodes"),". Sequencers are the main block producers for rollups, respoonsible for aggregating transactions into blocks, and typically executing transactions to produce a state root, securing the rollup's light clients."),(0,l.kt)("h3",{id:"full-node"},"Full node"),(0,l.kt)("p",null,"Full nodes verify all blocks and can produce fraud proofs for optimistic rollups. Since they fully validate all rollup blocks, they don't rely on fraud or validity proofs for security."),(0,l.kt)("h3",{id:"light-node"},"Light node"),(0,l.kt)("p",null,"Light nodes are light-weight rollup nodes that authenticate block headers, and are secured by fraud proofs or validity proofs. They're recommended for average users on low-resource devices. Users running light nodes can make trust-minimized queries about the rollup's state."),(0,l.kt)("h2",{id:"block-manager"},"Block-Manager"),(0,l.kt)("h2",{id:"rpc-layer"},"RPC Layer"),(0,l.kt)("p",null,"This layer is for exploring the rollup chain and submitting transactions."))}d.isMDXComponent=!0}}]);