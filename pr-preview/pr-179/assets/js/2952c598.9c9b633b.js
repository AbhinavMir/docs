"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7087],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1843:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_label:"GM world frontend tutorial",description:"Build a frontend for your Rollkit rollup locally."},l="GM world frontend tutorial",i={unversionedId:"tutorials/gm-world-frontend",id:"tutorials/gm-world-frontend",title:"GM world frontend tutorial",description:"Build a frontend for your Rollkit rollup locally.",source:"@site/docs/tutorials/gm-world-frontend.md",sourceDirName:"tutorials",slug:"/tutorials/gm-world-frontend",permalink:"/pr-preview/pr-179/docs/tutorials/gm-world-frontend",draft:!1,editUrl:"https://github.com/rollkit/docs/tree/main/docs/tutorials/gm-world-frontend.md",tags:[],version:"current",frontMatter:{sidebar_label:"GM world frontend tutorial",description:"Build a frontend for your Rollkit rollup locally."},sidebar:"docs",previous:{title:"GM world tutorial",permalink:"/pr-preview/pr-179/docs/tutorials/gm-world"},next:{title:"Recipe book tutorial",permalink:"/pr-preview/pr-179/docs/tutorials/recipe-book"}},s={},p=[{value:"Getting started",id:"getting-started",level:2},{value:"Setting up the frontend",id:"setting-up-the-frontend",level:2},{value:"Adding your GM portal chain to the config",id:"adding-your-gm-portal-chain-to-the-config",level:2},{value:"TODO",id:"todo",level:2}],c={toc:p};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gm-world-frontend-tutorial"},"GM world frontend tutorial"),(0,o.kt)("p",null,"In this tutorial, we'll learn how to use ",(0,o.kt)("a",{parentName:"p",href:"https://cosmology.tech/"},"Cosmology")," to\ncreate a frontend for our ",(0,o.kt)("a",{parentName:"p",href:"../gm-world"},"GM world")," rollup."),(0,o.kt)("p",null,"Cosmology enables developers to build web3 apps in the Interchain Ecosystem.\nWith Cosmology, it's simple to begin building apps that communicate with\nCosmos SDK and CosmWasm chains."),(0,o.kt)("p",null,"We'll be using ",(0,o.kt)("inlineCode",{parentName:"p"},"create-cosmos-app")," in this tutorial to scaffold\na frontend and add the chain information for our rollup."),(0,o.kt)("p",null,"In the end, you'll have something that looks like this\n",(0,o.kt)("a",{parentName:"p",href:"https://rollkit-frontend.vercel.app"},"demo"),"\n(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jcstein/rollkit-frontend"},"repo"),")."),(0,o.kt)("h2",{id:"getting-started"},"Getting started"),(0,o.kt)("p",null,"In order to complete this tutorial you will need to have completed\nthe ",(0,o.kt)("a",{parentName:"p",href:"../gm-world"},"GM world tutorial"),". This requires a running rollup\non your local machine."),(0,o.kt)("h2",{id:"setting-up-the-frontend"},"Setting up the frontend"),(0,o.kt)("p",null,"Now that you have your rollup running, you are ready to scaffold\nthe frontend! In your terminal, first install ",(0,o.kt)("inlineCode",{parentName:"p"},"create-cosmos-app"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g create-cosmos-app\n")),(0,o.kt)("p",null,"Now scaffold an app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"create-cosmos-app\n")),(0,o.kt)("p",null,"In this tutorial, we're using the following setting and your output\nwill look similar to this if everything is successful:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"? [name] Enter your new app name gm-world\nCloning into 'gm-world'...\n? [template] which template connect-multi-chain\nyarn install v1.22.19\n[1/4] Resolving packages...\n[2/4] Fetching packages...\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nDone in 42.23s.\n\n\n                 |              _   _\n     ===         |.===.        '\\-//`\n    (o o)        {}o o{}        (o o)\nooO--(_)--Ooo-ooO--(_)--Ooo-ooO--(_)--Ooo-\n\n\u2728 Have fun! Now you can start on your project \u269b\ufe0f\n\nNow, run this command:\n\ncd ./gm-world && yarn dev\n")),(0,o.kt)("p",null,"Follow the instructions at the end of the output to start your app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ./gm-world && yarn dev\n")),(0,o.kt)("h2",{id:"adding-your-gm-portal-chain-to-the-config"},"Adding your GM portal chain to the config"),(0,o.kt)("p",null,"First, we'll need to make some changes with the default config."),(0,o.kt)("p",null,"We need to add the array of chains that we would like to test\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"components/wallet.tsx")," file on underneath imports:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const allowedChains = [\n  'gmrollup',\n  'celestiatestnet',\n  'celestiatestnet2',\n  'celestiatestnet3',\n];\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"chainOptions")," change ",(0,o.kt)("inlineCode",{parentName:"p"},"chainRecords")," this to show only the allowed chains\nfrom your array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="hi"',title:'"hi"'},"chainRecords\n      .filter((chainRecord) => allowedChains.includes(chainRecord.name))\n      .map((chainRecord) => {\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"configs/defaults.ts")," change ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultChainName")," to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export const defaultChainName = 'gmrollup';\n")),(0,o.kt)("p",null,"Now you're ready to see only the chains you've selected, but first, we need\nto set up the config for ",(0,o.kt)("inlineCode",{parentName:"p"},"gmrollup"),"!"),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," directory, create a new file called ",(0,o.kt)("inlineCode",{parentName:"p"},"chain.ts"),". This will\nbe your config for your GM rollup."),(0,o.kt)("p",null,"In that file, put the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'export const chain = {\n    "$schema": "../../chain.schema.json",\n    "chain_name": "gmrollup",\n    "chain_id": "gm",\n    "pretty_name": "my gm rollup",\n    "status": "live",\n    "network_type": "testnet",\n    "bech32_prefix": "gm",\n    "daemon_name": "gmd",\n    "node_home": "$HOME/.gm",\n    "key_algos": [\n      "secp256k1"\n    ],\n    "slip44": 118,\n    "fees": {\n      "fee_tokens": [\n        {\n          "denom": "ustake",\n          "fixed_min_gas_price": 0\n        }\n      ]\n    },\n    "apis": {\n      "rpc": [\n        {\n          "address": "http://localhost:26657",\n          "provider": "JCS"\n        }\n      ],\n      "rest": [\n        {\n          "address": "http://localhost:1317",\n          "provider": "JCS"\n        }\n      ]\n    },\n    "beta": true,\n  }\n')),(0,o.kt)("p",null,"Create a new file in ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," called ",(0,o.kt)("inlineCode",{parentName:"p"},"assetlist.ts")," and add the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'export const assetlist = {\n    "$schema": "../../assetlist.schema.json",\n    "chain_name": "gmrollup",\n    "assets": [\n      {\n        "description": "",\n        "denom_units": [\n          {\n            "denom": "ustake",\n            "exponent": 0\n          },\n          {\n            "denom": "stake",\n            "exponent": 6\n          }\n        ],\n        "base": "stake",\n        "name": "GM rollup",\n        "display": "stake",\n        "symbol": "STAKE",\n        "logo_URIs": {\n          "svg": "https://raw.githubusercontent.com/jcstein/gm-portal/b030ce3fe548d188fbacb6b932d7e51dc7afd65e/frontend/public/gm.svg"\n        }\n      }\n    ]\n  }\n')),(0,o.kt)("p",null,"Create a new file in ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," directory called ",(0,o.kt)("inlineCode",{parentName:"p"},"defaults.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { assets } from 'chain-registry';\nimport { AssetList, Asset } from '@chain-registry/types';\n\nexport const defaultChainName = 'gmrollup';\n\nexport const getChainAssets = (chainName: string = defaultChainName) => {\n  return assets.find((chain) => chain.chain_name === chainName) as AssetList;\n};\n\nexport const getCoin = (chainName: string = defaultChainName) => {\n  const chainAssets = getChainAssets(chainName);\n  return chainAssets.assets[0] as Asset;\n};\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"_app.tsx")," you can now import ",(0,o.kt)("inlineCode",{parentName:"p"},"assetlist")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"chain")," with your\nnew GM config!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'# other imports\nimport { chain } from "../config/chain"\nimport { assetlist } from "../config/assetlist"\n\n# rest of code\n')),(0,o.kt)("p",null,"Then, modify your ",(0,o.kt)("inlineCode",{parentName:"p"},"ChainProvider"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<ChainProvider\n        chains={[...chains, chain]}\n        assetLists={[...assets, assetlist]}\n        wallets={[...keplrWallets, ...cosmostationWallets, ...leapWallets]}\n        walletConnectOptions={{\n          signClient: {\n            projectId: 'a8510432ebb71e6948cfd6cde54b70f7',\n            relayUrl: 'wss://relay.walletconnect.org',\n            metadata: {\n              name: 'Celestia + Cosmos SDK',\n              description: 'Celestia + Cosmos SDK',\n              url: 'https://docs.celestia.org/',\n              icons: [],\n            },\n          },\n        }}\n        endpointOptions={{\n          isLazy: true\n        }}\n        wrappedWithChakra={true}\n        signerOptions={signerOptions}\n      >\n")),(0,o.kt)("p",null,"You may notice that we added:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"endpointOptions={{isLazy: true}}\n")),(0,o.kt)("p",null,"This will save our localhost RPC from being overridden."),(0,o.kt)("p",null,"Congratulations! You now have a frontend for your rollup.\nWhat features do you want to add now?"),(0,o.kt)("p",null,"You may notice that the icons for Celestia testnets are not loading,\nthis is due to an outdated version of the chain registry."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cca.png",src:t(4812).Z,width:"1196",height:"1102"})),(0,o.kt)("p",null,"To update\nthese, you can use your terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd $HOME && cd gm-world\nyarn upgrade-interactive --latest\n")),(0,o.kt)("p",null,"Select ",(0,o.kt)("inlineCode",{parentName:"p"},"@chain-registry/types")," by using arrow keys and the spacebar\nto select it. Do the same with ",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmos-kit/core"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmos-kit\ncosmostation"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmos-kit/keplr"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmos-kit/leap"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmos-kit/react"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@chain-registry/cosmostation")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"chain-registry"),"."),(0,o.kt)("p",null,"Now use enter to upgrade the dependencies!"),(0,o.kt)("p",null,"Head back to your frontend and take a look, you should see the\nupdated icons."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"cca-2.png",src:t(2673).Z,width:"806",height:"644"})),(0,o.kt)("h2",{id:"todo"},"TODO"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"edit chain denom/token"),(0,o.kt)("li",{parentName:"ul"},"show how to connect wallet and display balance in Keplr"),(0,o.kt)("li",{parentName:"ul"},"any other suggestions")))}d.isMDXComponent=!0},2673:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/cca-2-d77b4e415ca0aa4499d267071d403858.png"},4812:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/cca-54747f2736cbb93d7f0c2b52582dbb5b.png"}}]);