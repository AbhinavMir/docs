"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[193],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(r),k=n,f=p["".concat(s,".").concat(k)]||p[k]||u[k]||l;return r?o.createElement(f,a(a({ref:t},d),{},{components:r})):o.createElement(f,a({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,a=new Array(l);a[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:n,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}k.displayName="MDXCreateElement"},8793:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const l={sidebar_position:2,sidebar_label:"Rollkit Stack",description:"Intro to Rollkit's stack, a modular framework for rollups."},a="The Rollkit Stack",i={unversionedId:"rollkit-stack",id:"rollkit-stack",title:"The Rollkit Stack",description:"Intro to Rollkit's stack, a modular framework for rollups.",source:"@site/docs/rollkit-stack.md",sourceDirName:".",slug:"/rollkit-stack",permalink:"/docs/rollkit-stack",draft:!1,editUrl:"https://github.com/rollkit/docs/tree/main/docs/rollkit-stack.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Rollkit Stack",description:"Intro to Rollkit's stack, a modular framework for rollups."},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Tutorials",permalink:"/docs/category/tutorials"}},s={},c=[{value:"Rollup Application Dependencies",id:"rollup-application-dependencies",level:2},{value:"Mempool",id:"mempool",level:2},{value:"State Fraud Proofs",id:"state-fraud-proofs",level:2},{value:"P2P-Layer",id:"p2p-layer",level:2},{value:"DA-Access",id:"da-access",level:2},{value:"Rollkit Node Types",id:"rollkit-node-types",level:2},{value:"Sequencer node",id:"sequencer-node",level:3},{value:"Full node",id:"full-node",level:3},{value:"Light node",id:"light-node",level:3},{value:"Block-Manager",id:"block-manager",level:2},{value:"RPC Layer",id:"rpc-layer",level:2}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"the-rollkit-stack"},"The Rollkit Stack"),(0,n.kt)("p",null,"This section will cover the dependencies and customizeable components of Rollkit."),(0,n.kt)("p",null,"Roll-up sequencer nodes collect transactions from users, aggregate them into blocks, and post the blocks onto Celestia (or other DA layer) to be ordered and finalized. Full nodes execute and verify roll-up blocks, and propagate fraud-proofs when needed. Light clients receive headers, verify fraud proofs, and can authenticate trust-minimized queries about the state."),(0,n.kt)("admonition",{title:"Tip",type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"If you're familiar with Rollkit's stack, you may want to skip to the ",(0,n.kt)("a",{parentName:"p",href:"../category/tutorials"},"tutorials section"))),(0,n.kt)("p",null,"For an understanding of the Rollkit stack, let's first look at the key components of a rollup. A typical rollup has:"),(0,n.kt)("h2",{id:"rollup-application-dependencies"},"Rollup Application Dependencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Requires Golang version 1.19+")),(0,n.kt)("h2",{id:"mempool"},"Mempool"),(0,n.kt)("p",null,"The mempool keeps the set of pending transactions, and is used by block\nproducers (full nodes) to produce blocks. Transactions are handled by\nnodes in the First-Come, First-Served (FCFS) manner. Ordering of transactions\ncan be implemented on the application level (for example by adding\nnonce/sequence number). This behaviour is similar to the Tendermint mempool."),(0,n.kt)("h2",{id:"state-fraud-proofs"},"State Fraud Proofs"),(0,n.kt)("h2",{id:"p2p-layer"},"P2P-Layer"),(0,n.kt)("h2",{id:"da-access"},"DA-Access"),(0,n.kt)("h2",{id:"rollkit-node-types"},"Rollkit Node Types"),(0,n.kt)("h3",{id:"sequencer-node"},"Sequencer node"),(0,n.kt)("p",null,"Sequencer nodes are a node type that is responsible for ordering and\nsequencing transactions for the rollup."),(0,n.kt)("h3",{id:"full-node"},"Full node"),(0,n.kt)("p",null,"Full nodes are a crucial part of the networks, because they are responsible\nfor producing blocks and fraud proofs. They also create a link between the\nRollkit network and the DA and Consensus Layer, by pushing aggregates to\nthe DA and Consensus Layer."),(0,n.kt)("h3",{id:"light-node"},"Light node"),(0,n.kt)("p",null,"Light nodes are the main producer of transactions in the Rollkit network.\nThey participate in gossiping of fraud proofs. Light nodes may only\nrequest or store a subset of the state, so they can query chain balances\nand perform other state checks."),(0,n.kt)("h2",{id:"block-manager"},"Block-Manager"),(0,n.kt)("h2",{id:"rpc-layer"},"RPC Layer"),(0,n.kt)("p",null,"This layer is for exploring the rollup chain and submitting transactions."))}p.isMDXComponent=!0}}]);